///
/// @Generated by Mockolo
///



import Foundation


public class NetworkingMock: Networking {
    public init() { }


    public private(set) var dataCallCount = 0
    public var dataArgValues = [(URLRequest, URLSessionTaskDelegate?)]()
    public var dataHandler: ((URLRequest, URLSessionTaskDelegate?) async throws -> (
        Data, URLResponse
    ))?
    public func data(for request: URLRequest, delegate: URLSessionTaskDelegate?) async throws -> (
        Data, URLResponse
    ) {
        dataCallCount += 1
        dataArgValues.append((request, delegate))
        if let dataHandler = dataHandler {
            return try await dataHandler(request, delegate)
        }
        fatalError("dataHandler returns can't have a default value thus its handler must be set")
    }
}

public class GitHubClientProtocolMock: GitHubClientProtocol {
    public init() { }


    public private(set) var searchCallCount = 0
    public var searchArgValues = [(String, SortOrder, Int, String?)]()
    public var searchHandler: ((String, SortOrder, Int, String?) async throws -> ([Repository]))?
    public func search(query: String, sortOrder: SortOrder, page: Int, language: String?) async throws -> [Repository] {
        searchCallCount += 1
        searchArgValues.append((query, sortOrder, page, language))
        if let searchHandler = searchHandler {
            return try await searchHandler(query, sortOrder, page, language)
        }
        return [Repository]()
    }

    public private(set) var getSearchHistoryCallCount = 0
    public var getSearchHistoryArgValues = [Int]()
    public var getSearchHistoryHandler: ((Int) -> ([String]))?
    public func getSearchHistory(maxCount: Int) -> [String] {
        getSearchHistoryCallCount += 1
        getSearchHistoryArgValues.append(maxCount)
        if let getSearchHistoryHandler = getSearchHistoryHandler {
            return getSearchHistoryHandler(maxCount)
        }
        return [String]()
    }
}

